import os
import pandas as pd
import google.generativeai as genai
import logging

api_key = os.environ.get("GEMINI_API_KEY")
if api_key:
    genai.configure(api_key=api_key)
else:
    logging.warning("GEMINI_API_KEY is not set, Gemini features will be disabled.")


def generate_analyst_report(
    ticker_name: str,
    ticker_code: str,
    latest_data_dict: list[dict],
    predictions_dict: list[dict],
) -> str:
    """Return an investment report generated by Gemini."""
    if not api_key or os.environ.get("PYTEST_CURRENT_TEST"):
        return "Gemini API key is not configured."

    latest_data_text = (
        pd.DataFrame(latest_data_dict).to_string(index=False)
        if latest_data_dict
        else "（テクニカル指標データなし）"
    )
    predictions_text = (
        pd.DataFrame(predictions_dict).to_string(index=False)
        if predictions_dict
        else "（モデル予測データなし）"
    )

    prompt = f"""
あなたは、機械学習モデルの出力を解釈し、具体的な投資戦略を立案することに特化した、
トップクラスのクオンツ・アナリストです。感情や主観を排し、与えられたデータのみに基
づいて、論理的な結論を導き出します。

これから、以下のデータに基づいて、**{ticker_name} ({ticker_code})** の投資判断レポート
を**指定のMarkdown形式**で作成してください。**指定されたフォーマット以外の余計な文
章は一切含めないでください。**

---
### **【入力データ】**

#### 最新のテクニカル指標
{latest_data_text}

#### 機械学習モデルによる予測
{predictions_text}
---

### **【アウトプット】**

```markdown
### 投資戦略サマリー：{ticker_name}

| 評価軸 | 分析結果と判断 |
|:---|:---|
| **短期トレンド (1-7日)** | （入力データに基づき、「強気」「中立」「弱気」のいずれかで評
価し、その根拠（例: 「1日後UP予測だが、期待リターンが低く限定的」など）を簡潔に記述） |
| **中期トレンド (28日)** | （入力データに基づき、「強気」「中立」「弱気」のいずれかで評
価し、その根拠（例: 「28日後はDOWN予測で、期待リターンも大きくマイナス」など）を簡潔
に記述） |
| **モデルの信頼性** | （上昇確率が50%に近いか、大きく偏っているかに基づき、「確信度
高」「確信度中」「確信度低」のいずれかで評価） |
| **総合評価** | （上記3点を統合した最終的な投資スタンスを「買い推奨」「様子見」
「売り推奨」で明確に記述） |

## 4. 具体的な戦略プラン
- **エントリーポイント:** （モデルの予測が「UP」で、かつ期待リターンがプラスの場合、具体的な価格帯を推奨。例:「現在の価格`XXXX`円近辺での打診買いを推奨」。
  DOWN予測の場合は「エントリー見送り」と記述）
- **ターゲットプライス:** （期待リターンが`+Y%`なら、現在の価格にY%を乗じた価格を目標値として提示。
  例:「期待リターン`+2.5%`に基づき、目標株価は`YYYY`円」）
- **ストップロス:** （期待リターンがマイナスの場合、その数値を参考に損切りラインを提示。
  あるいは、ATR指標の数値を参考に、「現在の価格からATRの2倍である`ZZ`円下を損切りラインとする」など、よりテクニカルな根拠を提示）
```
"""
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        generation_config = genai.types.GenerationConfig(temperature=0.2)
        response = model.generate_content(
            prompt, generation_config=generation_config
        )
        return response.text
    except Exception as e:
        return f"Error generating report from Gemini: {e}"
