import os
import pandas as pd
import google.generativeai as genai
import logging

api_key = os.environ.get("GEMINI_API_KEY")
if api_key:
    genai.configure(api_key=api_key)
else:
    logging.warning("GEMINI_API_KEY is not set, Gemini features will be disabled.")


def generate_analyst_report(
    ticker_name: str,
    ticker_code: str,
    latest_data_dict: list[dict],
    predictions_dict: list[dict],
) -> str:
    """Return an investment report generated by Gemini."""
    if not api_key or os.environ.get("PYTEST_CURRENT_TEST"):
        return "Gemini API key is not configured."

    latest_data_text = (
        pd.DataFrame(latest_data_dict).to_string(index=False)
        if latest_data_dict
        else "（テクニカル指標データなし）"
    )
    predictions_text = (
        pd.DataFrame(predictions_dict).to_string(index=False)
        if predictions_dict
        else "（モデル予測データなし）"
    )

    reasoning_prompt = f"""
あなたはトップクラスのクオンツ・アナリストです。以下のデータを精査し、投資判断に必要な要点を日本語で箇条書きしてください。

---
### 最新のテクニカル指標
{latest_data_text}

### 機械学習モデルによる予測
{predictions_text}
---
"""

    final_prompt_template = """
先ほどの考察結果を基に、{ticker_name} ({ticker_code}) の投資判断レポートをMarkdown形式でまとめてください。

```markdown
### 投資戦略サマリー：{ticker_name}

| 評価軸 | 分析結果と判断 |
|:---|:---|
| **短期トレンド (1-7日)** | （1日後・7日後の予測と期待リターンに基づき、「強気」「中立」「弱気」で評価。その根拠も簡潔に記述） |
| **中期トレンド (28日)** | （28日後の予測と期待リターンに基づき、「強気」「中立」「弱気」で評価。その根拠も簡潔に記述） |
| **短期モデルの信頼性 (1-7日)** | （1日後・7日後の**上昇確率**に基づき、確信度を[高/中/低]で評価。例: 「上昇確率が32%, 41%と50%に近く、確信度は低い」） |
| **中期モデルの信頼性 (28日)** | （28日後の**上昇確率**に基づき、確信度を[高/中/低]で評価。例: 「上昇確率が98%と極端な値を示しており、確信度は非常に高い」） |
| **総合評価** | （上記4点を統合した最終的な投資スタンスを「買い推奨」「様子見」「売り推奨」で明確に記述） |

## 4. 具体的な戦略プラン
- **エントリーポイント:** （モデルの予測が「UP」で、かつ期待リターンがプラスの場合、具体的な価格帯を推奨。例:「現在の価格`XXXX`円近辺での打診買いを推奨」。
  DOWN予測の場合は「エントリー見送り」と記述）
- **ターゲットプライス:** （期待リターンが`+Y%`なら、現在の価格にY%を乗じた価格を目標値として提示。
  例:「期待リターン`+2.5%`に基づき、目標株価は`YYYY`円」）
- **ストップロス:** （期待リターンがマイナスの場合、その数値を参考に損切りラインを提示。
  あるいは、ATR指標の数値を参考に、「現在の価格からATRの2倍である`ZZ`円下を損切りラインとする」など、よりテクニカルな根拠を提示）
```
"""

    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        generation_config = genai.types.GenerationConfig(temperature=0.2)

        reasoning_resp = model.generate_content(
            reasoning_prompt, generation_config=generation_config
        )
        final_prompt = final_prompt_template.format(ticker_name=ticker_name, ticker_code=ticker_code) + "\n" + reasoning_resp.text

        final_resp = model.generate_content(
            final_prompt, generation_config=generation_config
        )
        return final_resp.text
    except Exception as e:
        return f"Error generating report from Gemini: {e}"
